from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from email_validator import validate_email, EmailNotValidError

from app.db.utils import add_connected_email, get_my_connected_mail
from app.keyboards.mail import mail_go_kb
from app.utils.mail import check_format_password, connect_to_mail_dict

router = Router()
users_data = {}


class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()


@router.message(F.text.lower() == "üì¨–º–æ—è –ø–æ—á—Ç–∞")
async def mail_my_mail(message: Message):
    user_id = message.from_user.id
    my_mail_result = await get_my_connected_mail(user_id=user_id)

    if not my_mail_result:
        await message.answer(text="–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚ùå\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É</i>‚Üò")
        await message.delete()
    else:
        my_mail = my_mail_result[0]  # Extract the ConnectedMail object from the tuple
        email_address = my_mail.mail
        await message.answer(text=f"–í–∞—à–∞ –ø–æ—á—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚úÖ\nEmail: {email_address}")
        await message.delete()


@router.message(StateFilter(None), F.text.lower() == "üíå–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É")
async def mail_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    connected_mail = await get_my_connected_mail(user_id=user_id)
    print(connected_mail)
    if not connected_mail:
        await message.answer("–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É. –ï—Å–ª–∏ –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, "
                             "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ <i>–æ—Ç–º–µ–Ω–∞</i> –∏–ª–∏ <i>/cancel</i>")
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>your_gmail</b>@gmail.com:")
        await message.delete()
        await state.set_state(RegistrationStates.waiting_for_email)
    else:
        await message.answer("–ü–æ—á—Ç–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞üòé")
        await message.delete()
        await state.clear()
        return


@router.message(Command(commands=["cancel"]))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.delete()
    await message.answer(
        text="–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
    )


@router.message(RegistrationStates.waiting_for_email, F.text)
async def mail_typing(message: Message, state: FSMContext):
    email = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—á—Ç—ã
    try:
        v = validate_email(email)
        email = v.normalized
    except EmailNotValidError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ")
        return

    await state.update_data(email=email)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>xxxx xxxx xxxx xxxx</b>:")
    await state.set_state(RegistrationStates.waiting_for_password)


@router.message(RegistrationStates.waiting_for_password, F.text)
async def password_typing(message: Message, state: FSMContext):
    password = message.text
    if check_format_password(password):
        await state.update_data(password=message.text)
        user_data = await state.get_data()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = [
            [
                InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="mail_confirm"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–ø–∏—à–µ–º", callback_data="mail_rewrite")
            ],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=f"–í–∞—à email: {user_data['email']}\n–í–∞—à –ø–∞—Ä–æ–ª—å: {user_data['password']}",
            reply_markup=keyboard
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")


@router.callback_query(F.data.startswith("mail_"))
async def callbacks_mail(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_data = await state.get_data()

    if action == "confirm":
        mail_connection = connect_to_mail_dict({'mail': user_data['email'], 'hashed_password': user_data['password']})
        if mail_connection == "LoginFatal":
            await callback.message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –µ—â–µ —Ä–∞–∑ –∏ —Å–Ω–æ–≤–∞ '
                                          '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
                                          '"<i>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É</i>" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É‚Üò')
            await state.clear()
            return

        answer_message = await add_connected_email(mail=user_data['email'], password=user_data['password'],
                                                   user_id=user_id)
        await callback.message.answer(answer_message)

        await callback.message.edit_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()
    elif action == "rewrite":
        await callback.message.edit_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(RegistrationStates.waiting_for_email)
        await mail_start(callback.message, state)



