from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from email_validator import validate_email, EmailNotValidError

from app.db.utils import add_connected_email, get_my_connected_mail, get_user_by_id, add_mail_to_white_list, \
    get_white_list, change_is_launched, get_is_launched_status, delete_connected_email, remove_mail_from_white_list, \
    get_is_whitelist_active_status, change_is_whitelist_active
from app.keyboards.mail import mail_go_kb, mail_white_list, mail_white_list_after_enter_kb, my_mail_kb, \
    mail_white_list_after_remove_kb
from app.utils.mail import check_format_password, connect_to_mail_dict, validate_and_normalize_email, format_email_list, \
    send_whitelist_page

router = Router()


@router.message(F.text.lower() == "üì¨–º–æ—è –ø–æ—á—Ç–∞")
async def mail_my_mail(message: Message):
    user_id = message.from_user.id
    my_mail_result = await get_my_connected_mail(user_id=user_id)

    if not my_mail_result:
        await message.answer(text="–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚ùå\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É</i>‚Üò")
        await message.delete()
    else:
        my_mail = my_mail_result[0]  # Extract the ConnectedMail object from the tuple
        email_address = my_mail.mail
        await message.answer(text=f"–í–∞—à–∞ –ø–æ—á—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚úÖ\nEmail: {email_address}", reply_markup=my_mail_kb())
        await message.delete()


@router.callback_query(F.data.startswith("mymail_remove"))
async def callback_my_mail(callback: CallbackQuery):
    user_id = callback.from_user.id
    my_mail_result = await get_my_connected_mail(user_id=user_id)
    if not my_mail_result:
        await callback.message.answer(text="–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –æ—Ç–≤—è–∑—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ‚ùå")
        await callback.message.delete()
        return
    if my_mail_result[0].is_launched:
        await callback.message.answer(text="–£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞, –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–∫–ª—é—á–∏—Ç–µ –µ–µ, –≤—ã–±—Ä–∞–≤ '<i>‚ùå–û—Ç–º–µ–Ω–∏—Ç—å "
                                           "—Ä–∞—Å—Å—ã–ª–∫—É</i>' –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É ‚Üò")
        await callback.message.delete()
        return
    else:
        await delete_connected_email(user_id)
        await callback.message.answer(text="–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞‚úÖ")
        await callback.message.delete()
        return


@router.message(Command(commands=["cancel"]))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.delete()
    await message.answer(
        text="–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
    )


class WhitelistState(StatesGroup):
    waiting_for_email = State()
    waiting_for_remove_email = State()


@router.message(F.text.lower() == "‚úÖ–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
async def white_list(message: Message):
    user_id = message.from_user.id
    current_user = await get_user_by_id(user_id)
    is_whitelist_active = '–≤–∫–ª—é—á–µ–Ω–æ' if await get_is_whitelist_active_status(user_id) else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
    if current_user:
        await message.answer(text="‚úÖ–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫‚úÖ\n\n"
                                  f"–°—Ç–∞—Ç—É—Å: {is_whitelist_active}\n"
                                  "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –ø–æ—á—Ç—ã. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ç–æ –≤–∞–º –±—É–¥—É—Ç "
                                  "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=mail_white_list())
        await message.delete()


@router.callback_query(StateFilter(None), F.data.startswith("whiteList_"))
async def callbacks_whiteList(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    if action == "addWhiteList":
        await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É (—Ñ–æ—Ä–º–∞—Ç: xxx@xxx.xxx): ")
        await callback.message.delete()
        await state.set_state(WhitelistState.waiting_for_email)

    elif action == "shwoWhiteList":
        whitelist = await get_white_list(user_id)

        current_page = 1
        await send_whitelist_page(current_page, callback.message, whitelist)

    elif action == "removeMail":
        await callback.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É (—Ñ–æ—Ä–º–∞—Ç: xxx@xxx.xxx): ")
        await state.set_state(WhitelistState.waiting_for_remove_email)

    elif action == "changeStatus":
        change_is_whitelist_active_state = await change_is_whitelist_active(user_id)
        await callback.message.answer(change_is_whitelist_active_state)
        await callback.message.delete()


@router.callback_query(lambda c: c.data.startswith('whitelist_prev_page_') or c.data.startswith('whitelist_next_page_'))
async def process_pagination_callback(callback: CallbackQuery):
    page = int(callback.data.split('_')[-1])
    user_id = callback.from_user.id
    whitelist = await get_white_list(user_id)

    if callback.data.startswith('whitelist_prev_page_'):
        page -= 1
    elif callback.data.startswith('whitelist_next_page_'):
        page += 1

    await send_whitelist_page(page, callback.message, whitelist)
    await callback.answer()


@router.message(WhitelistState.waiting_for_email, F.text)
async def whitelist_mail_typing(message: Message, state: FSMContext):
    email = message.text
    user_id = message.from_user.id

    if validate_and_normalize_email(email) is not None:
        email_add = await add_mail_to_white_list(email, user_id)
        if email_add == 404:
            await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—Éüò¢")
            await state.clear()
            return
        elif email_add == 201:
            await message.answer(text=f"–ü–æ—á—Ç–∞ {email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫‚úÖ",
                                 reply_markup=mail_white_list_after_enter_kb())
        elif email_add == 409:
            await message.answer(text="–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç—É –ø–æ—á—Ç—É, –¥–∞–≤–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–µ–Ω—å–∫–æ–µüòï\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É "
                                      "–∑–∞–Ω–æ–≤–æ: ")
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ")


@router.message(WhitelistState.waiting_for_remove_email, F.text)
async def whitelist_mail_remove_typing(message: Message, state: FSMContext):
    email = message.text
    user_id = message.from_user.id

    if validate_and_normalize_email(email) is not None:
        email_remove = await remove_mail_from_white_list(email, user_id)
        print(email_remove)
        if email_remove == 404:
            await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç—Éüò¢")
            await state.clear()
            return
        elif email_remove == 200:
            await message.answer(text=f"–ü–æ—á—Ç–∞ {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞‚úÖ",
                                 reply_markup=mail_white_list_after_remove_kb())
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ")


@router.callback_query(F.data.startswith("whiteListAfterEnter_"))
async def callbacks_whiteList(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "add":
        await callback.message.answer("–î–∞–≤–∞–π—Ç–µ –µ—â–µ –ø–æ–ø–æ–ª–Ω–∏–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.\n–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É (—Ñ–æ—Ä–º–∞—Ç: xxx@xxx.xxx): ")
        await callback.message.delete()
        await state.set_state(WhitelistState.waiting_for_email)
    elif action == "leave":
        await callback.message.answer("‚Äçüîß–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω")
        await callback.message.delete()
        await state.clear()


@router.callback_query(F.data.startswith("whiteListAfterRemove_"))
async def callbacks_whiteList_remove(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "remove":
        await callback.message.answer("–î–∞–≤–∞–π—Ç–µ –µ—â–µ –æ—á–∏—Å—Ç–∏–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.\n–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É (—Ñ–æ—Ä–º–∞—Ç: xxx@xxx.xxx): ")
        await callback.message.delete()
        await state.set_state(WhitelistState.waiting_for_remove_email)
    elif action == "leave":
        await callback.message.answer("‚Äçüîß–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        await callback.message.delete()
        await state.clear()


class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()


@router.message(StateFilter(None), F.text.lower() == "üíå–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É")
async def mail_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    connected_mail = await get_my_connected_mail(user_id=user_id)
    if not connected_mail:
        await message.answer("–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É. –ï—Å–ª–∏ –ø–æ–π–º–µ—Ç–µ, —á—Ç–æ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, "
                             "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ <i>–æ—Ç–º–µ–Ω–∞</i> –∏–ª–∏ <i>/cancel</i>")
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>your_gmail</b>@gmail.com:")
        await message.delete()
        await state.set_state(RegistrationStates.waiting_for_email)
    else:
        await message.answer("–ü–æ—á—Ç–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞üòé")
        await message.delete()
        await state.clear()
        return


@router.message(RegistrationStates.waiting_for_email, F.text)
async def mail_typing(message: Message, state: FSMContext):
    email = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—á—Ç—ã
    try:
        v = validate_email(email)
        email = v.normalized
    except EmailNotValidError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ")
        return

    await state.update_data(email=email)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>xxxx xxxx xxxx xxxx</b>:")
    await state.set_state(RegistrationStates.waiting_for_password)


@router.message(RegistrationStates.waiting_for_password, F.text)
async def password_typing(message: Message, state: FSMContext):
    password = message.text
    if check_format_password(password):
        await state.update_data(password=message.text)
        user_data = await state.get_data()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons = [
            [
                InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="mail_confirm"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–ø–∏—à–µ–º", callback_data="mail_rewrite")
            ],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=f"–í–∞—à email: {user_data['email']}\n–í–∞—à –ø–∞—Ä–æ–ª—å: {user_data['password']}",
            reply_markup=keyboard
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")


@router.callback_query(F.data.startswith("mail_"))
async def callbacks_mail(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    user_id = callback.from_user.id
    user_data = await state.get_data()

    if action == "confirm":
        mail_connection = connect_to_mail_dict({'mail': user_data['email'], 'hashed_password': user_data['password']})
        if mail_connection == "LoginFatal":
            await callback.message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –µ—â–µ —Ä–∞–∑ –∏ —Å–Ω–æ–≤–∞ '
                                          '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
                                          '"<i>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É</i>" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É‚Üò')
            await state.clear()
            return

        answer_message = await add_connected_email(mail=user_data['email'], password=user_data['password'],
                                                   user_id=user_id)
        await callback.message.answer(answer_message)

        await callback.message.edit_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()
    elif action == "rewrite":
        await callback.message.edit_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(RegistrationStates.waiting_for_email)
        await mail_start(callback.message, state)
