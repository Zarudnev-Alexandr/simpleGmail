import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from app.db.database import init_models
from app.db.utils import get_my_connected_mail, change_is_launched, get_is_launched_status, get_all_connected_mails
from config_reader import config
from app.handlers import mail, start
from aiogram.fsm.storage.memory import MemoryStorage
from app.utils.mail import distribution_mail

username1 = "alexandrzarudnev57@gmail.com"
app_password1 = "ksqk uuwe tpuf lljx"

username2 = "sashazarudnev107@gmail.com"
app_password2 = "xltk ibjq bnif yrdd"

# MAX_MESSAGE_LENGTH = 3500

gmail_host = "imap.gmail.com"

logging.basicConfig(level=logging.INFO, stream=sys.stdout)

bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")

dp = Dispatcher(storage=MemoryStorage())

dp.include_routers(mail.router)
dp.include_routers(start.router)

active_tasks = {}


@dp.message(F.text.lower() == "üöÄ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def go(message1: Message):
    user_id = message1.from_user.id
    my_mail_result = await get_my_connected_mail(user_id=user_id)
    current_status = await get_is_launched_status(user_id)
    if not my_mail_result:
        await message1.answer(text="–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞‚ùå\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É</i>‚Üò")
        return
    if current_status:
        await message1.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–∏—Å—å–º–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É")
    else:
        await change_is_launched(user_id)
        await message1.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        active_task = active_tasks.get(user_id)
        if active_task:
            active_task.cancel()
            del active_tasks[user_id]
        new_task = asyncio.create_task(distribution_mail(user_id, bot, {'mail': my_mail_result[0].mail, 'hashed_password':
            my_mail_result[0].hashed_password}, ))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ª–æ–≤–∞—Ä–µ
        active_tasks[user_id] = new_task


@dp.message(F.text.lower() == "‚ùå–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def cancel_distribution(message: Message):
    user_id = message.from_user.id
    current_status = await get_is_launched_status(user_id)
    if current_status:
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            active_task = active_tasks.get(user_id)
            if active_task:
                await asyncio.shield(active_task.cancel())  # –ò–∑–æ–ª–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –æ—Ç –æ—Ç–º–µ–Ω—ã
                del active_tasks[user_id]
        except asyncio.CancelledError:
            pass  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
        finally:
            await change_is_launched(user_id)
            await message.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <i>üöÄ–ó–∞–ø—É—Å—Ç–∏—Ç—å</i> –Ω–∞ "
                                      "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É ‚Üò")
    else:
        await message.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <i>üöÄ–ó–∞–ø—É—Å—Ç–∏—Ç—å</i> –Ω–∞ "
                                  "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É ‚Üò")


async def main():
    try:
        await init_models()
        users = await get_all_connected_mails()

        tasks = []

        for item in users:
            if item.is_launched:
                task = asyncio.create_task(
                    distribution_mail(item.user_id, bot, {'mail': item.mail, 'hashed_password': item.hashed_password}))
                tasks.append(task)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ª–æ–≤–∞—Ä–µ
                active_tasks[item.user_id] = task

        polling_task = dp.start_polling(bot)
        tasks.append(polling_task)

        await asyncio.gather(*tasks, return_exceptions=True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º return_exceptions=True

    except asyncio.CancelledError:
        print("Some tasks were cancelled, but the bot continues running.")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
