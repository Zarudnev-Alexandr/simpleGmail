from sqlalchemy import select, and_
from sqlalchemy.orm import joinedload

from . import get_db
from .models import User, ConnectedMail, Mail, Whitelist


async def get_user_by_id(user_id: int):
    async for db in get_db():
        existing_user = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        existing_user = existing_user.first()
        return existing_user


async def add_user(user_id: int):
    async for db in get_db():
        existing_user = await db.execute(
            select(User).where(User.telegram_id == user_id)
        )
        existing_user = existing_user.first()

        if not existing_user:
            new_user = User(telegram_id=user_id)
            db.add(new_user)
            await db.commit()
            return "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º? –°–µ–π—á–∞—Å –≤—Å–µ –ø–æ–∫–∞–∂–µ–º."
        else:
            return "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ä—ã—Ö –¥—Ä—É–∑–µ–π."


async def get_my_connected_mail(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()

        if connected_mail is not None:
            return connected_mail  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç connected_mail, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    return None


async def get_all_connected_mails():
    async for db in get_db():
        connected_mails = await db.execute(
            select(ConnectedMail).where(ConnectedMail.is_launched == True)
        )
        connected_mails = connected_mails.scalars().all()

        if connected_mails is not None:
            return connected_mails  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç connected_mail, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    return None


async def add_connected_email(mail: str, password: str, user_id: int):
    async for db in get_db():
        existing_connected_mail = await get_my_connected_mail(user_id)

        if not existing_connected_mail:
            new_connected_mail = ConnectedMail(mail=mail, hashed_password=password, user_id=user_id)
            db.add(new_connected_mail)
            await db.commit()
            return "–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞üëè"
        else:
            return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞üòï"


async def delete_connected_email(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()

        if connected_mail:
            await db.delete(connected_mail[0])
            await db.commit()
            return "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞üñê"
        else:
            return "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èüòï"


# –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
async def change_is_launched(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()
        if connected_mail is not None:
            existing_connected_mail = connected_mail

        if not existing_connected_mail:
            return "–ü–æ—á—Ç–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        else:
            connected_mail_instance = existing_connected_mail[0]
            connected_mail_instance.is_launched = not connected_mail_instance.is_launched
            await db.commit()
            return f"–°—Ç–∞—Ç—É—Å is_launched –¥–ª—è –ø–æ—á—Ç—ã {connected_mail_instance.mail} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {connected_mail_instance.is_launched}"


async def change_is_whitelist_active(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()
        if connected_mail is not None:
            existing_connected_mail = connected_mail

        if not existing_connected_mail:
            return "–ü–æ—á—Ç–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        else:
            connected_mail_instance = existing_connected_mail[0]
            connected_mail_instance.is_whitelist_active = not connected_mail_instance.is_whitelist_active
            await db.commit()
            return f"–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ {'–≤–∫–ª—é—á–µ–Ωüëå' if connected_mail_instance.is_whitelist_active else '–≤—ã–∫–ª—é—á–µ–Ω‚ùå'}"


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
async def get_is_launched_status(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()
        if connected_mail is not None:
            existing_connected_mail = connected_mail

        if not existing_connected_mail:
            return "–ü–æ—á—Ç–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        else:
            connected_mail_instance = existing_connected_mail[0]
            return connected_mail_instance.is_launched


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
async def get_is_whitelist_active_status(user_id: int):
    async for db in get_db():
        connected_mail = await db.execute(
            select(ConnectedMail).where(ConnectedMail.user_id == user_id)
        )
        connected_mail = connected_mail.first()
        if connected_mail is not None:
            existing_connected_mail = connected_mail

        if not existing_connected_mail:
            return "–ü–æ—á—Ç–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        else:
            connected_mail_instance = existing_connected_mail[0]
            return connected_mail_instance.is_whitelist_active


async def add_mail_to_white_list(mail: str, user_id: int):
    async for db in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email
        existing_mail = await db.execute(
            select(Mail).where(Mail.mail == mail)
        )
        existing_mail = existing_mail.first()

        if existing_mail is None:
            # –ï—Å–ª–∏ email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            new_mail = Mail(mail=mail)
            db.add(new_mail)
            await db.commit()
        else:
            # –ï—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            new_mail = existing_mail[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ whitelist
        existing_whitelist_entry = await db.execute(
            select(Whitelist).where(
                and_(Whitelist.user_id == user_id, Whitelist.mail_id == new_mail.id)
            )
        )
        existing_whitelist_entry = existing_whitelist_entry.first()

        if existing_whitelist_entry:
            return 409  # –ö–æ–Ω—Ñ–ª–∏–∫—Ç, –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ whitelist
        new_mail_in_whitelist = Whitelist(user_id=user_id, mail_id=new_mail.id)
        db.add(new_mail_in_whitelist)
        await db.commit()

        return 201  # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ whitelist


async def remove_mail_from_white_list(mail: str, user_id: int):
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        existing_mail = await db.execute(
            select(Mail).where(Mail.mail == mail)
        )
        existing_mail = existing_mail.first()

        if existing_mail is None:
            return 404  # –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ whitelist
        whitelist_entry = await db.execute(
            select(Whitelist).where(
                and_(Whitelist.user_id == user_id, Whitelist.mail_id == existing_mail[0].id)
            )
        )
        whitelist_entry = whitelist_entry.first()

        if not whitelist_entry:
            return 404  # –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ whitelist

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ whitelist
        await db.delete(whitelist_entry.Whitelist)  # Use the Whitelist instance
        await db.commit()

        return 200  # –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ whitelist


async def get_white_list(user_id: int):
    async for db in get_db():
        white_list = await db.execute(
            select(Mail).join(Whitelist).where(Whitelist.user_id == user_id)
        )
        white_list = white_list.scalars().all()
        return [mail.mail for mail in white_list]
